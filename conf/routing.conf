###
### ROUTING
###

#
# Odyssey allows to define client routing rules by specifying
# 'database', 'user' and 'storage' sections.
#
# On client accept appropriate route is assigned by matching 'database' and
# 'user' sections, all requests then forwarded to a 'storage'
# (which is referenced from the 'user' section).
#
# Database <name> | default.
#
# Defines database name requested by client. Each 'database' section structure
# consist of a 'user' subsections.
#
# A special 'database default' is used, in case when no database is matched.
#
# User <name> | default.
#
# Defines authentication, pooling and storage settings for
# requested route.
#
# A special 'user default' is used, in case when no user is matched.
#
# Storage <name>.
#
# Defines server used as a data storage or admin console operations.
#

storage "postgres_server" {
#
#	Storage type.
#
#	"remote" - PostgreSQL server
#	"local"  - Odyssey (admin console)
#
	type "remote"
#
#	Remote server address.
#
#	If host is not set, Odyssey will try to connect using UNIX socket if
#	unix_socket_dir is set.
#
	host "postgres"
#
#	Remote server port.
#
	port 5432
#
#	Remote server TLS settings.
#
#	tls "disable"
#	tls_ca_file ""
#	tls_key_file ""
#	tls_cert_file ""
#	tls_protocols ""
}

database default {
	user default {
#
#		Authentication method.
#
#		"none"       - authentication turned off
#		"block"      - block this user
#		"clear_text" - PostgreSQL clear text authentication
#		"md5"        - PostgreSQL MD5 authentication
#		"cert"       - Compare client certificate Common Name against auth_common_name's
#
		authentication "clear_text"

#
#		Authentication certificate CN.
#
#		Specify common names to check for "cert" authentification method.
#		If there are more then one common name is defined, all of them
#		will be checked until match.
#
#		Set 'default' to check for current user.
#
#		auth_common_name default
#		auth_common_name "test"

#
#		Authentication method password.
#
#		Depending on selected method, password can be in plain text or md5 hash.
#
		password "odoo"

#
#		Authentication query.
#
#		Use selected 'auth_query_db' and 'auth_query_user' to match a route.
#		Use matched route server to send 'auth_query' to get username and password needed
#		to authenticate a client.
#
#		auth_query "select username, pass from auth where username='%u'"
#		auth_query_db ""
#		auth_query_user ""

#
#		Client connections limit.
#
#		Comment 'client_max' to disable the limit. On client limit reach, Odyssey will
#		reply with 'too many connections'.
#
#		client_max 100

#
#		Remote server to use.
#
#		By default route database and user names are used as connection
#		parameters to remote server. It is possible to override this values
#		by specifying 'storage_db' and 'storage_user'. Remote server password
#		can be set using 'storage_password' field.
#
		storage "postgres_server"
#		storage_db "database"
		storage_user "odoo"
		storage_password "odoo"

#
#		Server pool mode.
#
#		"session"     - assign server connection to a client until it disconnects
#		"transaction" - assign server connection to a client during a transaction lifetime
#
		pool "session"

#
#		Server pool size.
#
#		Keep the number of servers in the pool as much as 'pool_size'.
#		Clients are put in a wait queue, when all servers are busy.
#
#		Set to zero to disable the limit.
#
		pool_size 0

#
#		Server pool wait timeout.
#
#		Time to wait in milliseconds for an available server.
#		Disconnect client on timeout reach.
#
#		Set to zero to disable.
#
		pool_timeout 0

#
#		Server pool idle timeout.
#
#		Close an server connection when it becomes idle for 'pool_ttl' seconds.
#
#		Set to zero to disable.
#
		pool_ttl 60

#
#		Server pool auto-cancel.
#
#		Start additional Cancel connection in case if server left with
#		executing query. Close connection otherwise.
#
		pool_cancel yes

#
#		Server pool auto-rollback.
#
#		Execute 'ROLLBACK' if server left in active transaction.
#		Close connection otherwise.
#
		pool_rollback yes

#
#		Forward PostgreSQL errors during remote server connection.
#
		client_fwd_error yes

#
#		Enable verbose mode for a specific route only.
#
		log_debug no
	}
}
